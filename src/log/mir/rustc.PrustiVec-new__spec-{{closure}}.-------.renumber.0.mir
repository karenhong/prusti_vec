// MIR for `PrustiVec::new__spec::{{closure}}`
// source = MirSource { def_id: DefId(0/1:10 ~ vec_verified[8787]::PrustiVec[0]::new__spec[0]::{{closure}}[0]), promoted: None }
// pass_name = renumber
// disambiguator = 0

fn PrustiVec::new__spec::{{closure}}(_1: &'6rv [closure@/Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:33 result:&'7rv std::vec::Vec<T>]) -> bool{
    let mut _0: bool;                    // return place
    let mut _2: usize;
    let mut _3: &'8rv std::vec::Vec<T>;

    bb0: {                              
        StorageLive(_2);                 // bb0[0]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:28
        StorageLive(_3);                 // bb0[1]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:22
        _3 = &'4rv (*((*_1).0: &'5rv std::vec::Vec<T>)); // bb0[2]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:22
        _2 = const <std::vec::Vec<T>>::len(move _3) -> [return: bb2, unwind: bb1]; // bb0[3]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:28
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r std::vec::Vec<T>) -> usize {<std::vec::Vec<T>><T>::len}
                                         // + val: Value(Scalar(Bits { defined: 0, bits: 0 }))
                                         // mir::Constant
                                         // + span: /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:28
                                         // + ty: for<'r> fn(&'r std::vec::Vec<T>) -> usize {<std::vec::Vec<T>><T>::len}
                                         // + literal: const <std::vec::Vec<T>>::len
    }

    bb1: {                               // cleanup
        resume;                          // bb1[0]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:33
    }

    bb2: {                              
        nop;                             // bb2[0]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:28
        StorageDead(_3);                 // bb2[1]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:27: 5:28
        _0 = Eq(move _2, const 0usize);  // bb2[2]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:16: 5:33
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(Bits { defined: 64, bits: 0 }))
                                         // mir::Constant
                                         // + span: /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:32: 5:33
                                         // + ty: usize
                                         // + literal: const 0usize
        StorageDead(_2);                 // bb2[3]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:32: 5:33
        return;                          // bb2[4]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:5:33: 5:33
    }
}
