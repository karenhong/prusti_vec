// MIR for `PrustiVec::capacity__spec`
// source = MirSource { def_id: DefId(0/0:12 ~ vec_verified[8787]::PrustiVec[0]::capacity__spec[0]), promoted: None }
// pass_name = renumber
// disambiguator = 0

fn PrustiVec::capacity__spec(_1: &'8rv Self, _2: usize) -> (){
    let mut _0: ();                      // return place
    let mut _3: [closure@/Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36 result:&'9rv usize, self:&'10rv &'11rv Self];
    let mut _4: &'12rv usize;
    let mut _5: &'13rv &'14rv Self;

    bb0: {                              
        StorageLive(_4);                 // bb0[0]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36
        _4 = &'3rv _2;                   // bb0[1]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36
        StorageLive(_5);                 // bb0[2]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36
        _5 = &'4rv _1;                   // bb0[3]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36
        _3 = [closure@/Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36] { result: move _4, self: move _5 }; // bb0[4]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36
                                         // closure
                                         // + def_id: DefId(0/1:14 ~ vec_verified[8787]::PrustiVec[0]::capacity__spec[0]::{{closure}}[0])
                                         // + substs: ClosureSubsts {
                                         //     substs: [
                                         //         Self,
                                         //         T,
                                         //         i8,
                                         //         extern "rust-call" fn(()) -> bool,
                                         //         &'5rv usize,
                                         //         &'6rv &'7rv Self
                                         //     ]
                                         // }
        nop;                             // bb0[5]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:16: 13:36
        StorageDead(_5);                 // bb0[6]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:35: 13:36
        StorageDead(_4);                 // bb0[7]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:13:35: 13:36
        _0 = ();                         // bb0[8]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:14:5: 14:33
        return;                          // bb0[9]: scope 0 at /Users/karenhong/prusti-lib-support/src/vec_verified.rs:14:33: 14:33
    }
}
